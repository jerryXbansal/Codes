Ex. 11: Write a program to generate machine code for a simple statement

To implement a java program to convert an assembly language statement to machine

Procedure
• Create a byte array to store the machine code
• Set the opcode for the MIPS instruction in the byte array
• Set the source register for the first operand in the byte array
• Set the source register for the second operand in the byte array
• Set the destination register in the byte array
• Set the function code for the MIPS instruction in the byte array
• Write the machine code to a file

Sample Code:

import java.io.FileOutputStream;
import java.io.IOException;
public class GenerateMachineCode {
public static void main(String[] args) throws IOException {
// Create a byte array to store the machine code
byte[] machineCode = new byte[4];
// Set the opcode for the MIPS instruction in the byte array
machineCode[0] = (byte) 0x0;
// Set the source register for the first operand in the byte array
machineCode[1] = (byte) 0x0;
// Set the source register for the second operand in the byte array
machineCode[2] = (byte) 0x80;
// Set the destination register in the byte array
machineCode[3] = (byte) 0x21;
// Write the machine code to a file
try (FileOutputStream fos = new FileOutputStream(“machine_code.bin”)){
fos.write(machineCode);
}
catch (IOException e) {
e.printStackTrace();
}
}
}

Explanation:

The machine code instructions for MIPS are 32 bits long. Each instruction is divided into
fields, which specify the opcode, source registers, destination register, and function code.
• The opcode for the add instruction is 000000. This is stored in the first byte of the
machine code instruction, which is machineCode[0].
• The source registers for the add instruction are $a0 and $a1. These are stored in the
second and third bytes of the machine code instruction, which are machineCode[1] and
machineCode[2].
• The destination register for the add instruction is $v0. This is stored in the fourth byte
of themachine code instruction, which is machineCode[3].
• The function code for the add instruction is 000001. This is also stored in the fourth byte
of the machine code instruction, which is machineCode[3].
• Therefore, the machine code instruction 000000000000000010000001 translates to the
MIPS assembly instruction add $v0, $a0, $a1.
Here is a breakdown of the machine code instruction:
000000: Opcode for the add instruction
00000: Source register for the first operand ($a0)
00001: Source register for the second operand ($a1)
10000: Destination register ($v0)
000001: Function code for the add instruction
Assembly Statement: add $v0, $a0, $a1
Machine Statement: 00000000000000000000000010000001

How to run:
javac GenerateMachineCode.java
java GenerateMachineCode
